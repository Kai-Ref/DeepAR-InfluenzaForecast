load("C:/Users/555ka/Coding/GIT-Projects/DeepAR_InfluenzaForecast/DeepAR_InfluenzaForecast/R/forecast_an_WIS_score.R")
load("C:/Users/555ka/Coding/GIT-Projects/DeepAR_InfluenzaForecast/DeepAR_InfluenzaForecast/.RData")
?path_forecast
vignette("hhh4addon")
path_forecast <- predictive_moments(fluFit, t_condition = train_length+1, lgt = 4)
print(path_forecast)
quantiles(path_forecast)
fanplot_prediction(path_forecast)
fanplot_prediction(path_forecast, unit = 16, add  =TRUE)
plot(fluFit, type = "fitted", unit = 16)# unit 16 equals the Düw LKs
library(hhh4addon)
plot(fluFit, type = "fitted", unit = 16)# unit 16 equals the Düw LKs
fanplot_prediction(path_forecast, unit = 16, add  =TRUE)
for (t_condition in (train_length):(test_length)){
path_forecast <- predictive_moments(fluFit, t_condition = t_condition, lgt = 4)
print(path_forecast)
}
results <- list()
for (t_condition in (train_length):(test_length)){
path_forecast <- predictive_moments(fluFit, t_condition = t_condition, lgt = 4)
results[[t_condition - train_length + 1]] <- path_forecast
print(t_condition)
}
View(results)
View(results)
variable_names <- names(results[[1]])
results_df <- data.frame(matrix(ncol = length(variable_names), nrow = 0))
colnames(results_df) <- variable_names
for (sublist in results) {
results_df <- rbind(results_df, do.call(rbind, sublist))
}
write.csv(results_df, file = "results.csv", row.names = FALSE)
setwd("C:/Users/555ka/Coding/GIT-Projects/DeepAR_InfluenzaForecast/DeepAR_InfluenzaForecast")
write.csv(results_df, file = "results.csv", row.names = FALSE)
print(results[[1]])
print(results[[1]]$mu_matrix)
print(results[[1]]$mu_matrix[0])
print(results[[1]]$mu_matrix[1])
print(results[[1]]$mu_matrix[2])
print(results[[1]]$mu_matrix[5])
print(results[[1]]$mu_matrix[[1,5]])
print(results[[1]]$mu_matrix[[1:5]])
for (path_forecast in results[0]){
mu <- path_forecast$mu_matrix
sigma2 <- path_forecast$var_matrix
size <- pmin(abs(mu / (sigma2 / mu - 1)), 10000)
quantiles <- qnbinom(p = c(0.025, 0.1, 0.25, 0.5, 0.75, 0.9, 0.975),
mu = mu["t=382", "LK Bad Dürkheim"],
size = size["t=382", "LK Bad Dürkheim"])
print(quantiles)
}
print(results[[1]]$mu_matrix[1:5])
print(results[[1]]$mu_matrix[1:5, "LK Bad Dürkheim"])
print(results[[1]]$mu_matrix[ "LK Bad Dürkheim"])
print(results[[1]]$mu_matrix[, "LK Bad Dürkheim"])
print(results[[1]]$mu_matrix[, ["LK Bad Dürkheim","LK Karlsruhe"]])
print(results[[1]]$mu_matrix[, "LK Bad Dürkheim","LK Karlsruhe"])
print(results[[1]]$mu_matrix[, ("LK Bad Dürkheim","LK Karlsruhe")])
print(results[[1]]$mu_matrix[, "LK Bad Dürkheim":"LK Karlsruhe"])
print(results[[1]]$mu_matrix[, LK Karlsruhe"])
print(results[[1]]$mu_matrix[, "LK Karlsruhe"])
View(results_df)
print(columns(results_df))
print(colnames(results_df))
for (col in colnames(results_df)[1]){
for (path_forecast in results[1]){
mu <- path_forecast$mu_matrix[, col]
sigma2 <- path_forecast$var_matrix[, col]
size <- pmin(abs(mu / (sigma2 / mu - 1)), 10000)
print(mu)
#quantiles <- qnbinom(p = c(0.025, 0.1, 0.25, 0.5, 0.75, 0.9, 0.975),
#       mu = mu["t=382", "LK Bad Dürkheim"],
#      size = size["t=382", "LK Bad Dürkheim"])
#print(quantiles)
}
}
print(mu[0])
for (col in colnames(results_df)[1]){
for (path_forecast in results[1]){
mu <- path_forecast$mu_matrix[, col]
sigma2 <- path_forecast$var_matrix[, col]
size <- pmin(abs(mu / (sigma2 / mu - 1)), 10000)
print(mu[0])
#quantiles <- qnbinom(p = c(0.025, 0.1, 0.25, 0.5, 0.75, 0.9, 0.975),
#       mu = mu["t=382", "LK Bad Dürkheim"],
#      size = size["t=382", "LK Bad Dürkheim"])
#print(quantiles)
}
}
for (col in colnames(results_df)[1]){
for (path_forecast in results[1]){
mu <- path_forecast$mu_matrix[, col]
sigma2 <- path_forecast$var_matrix[, col]
size <- pmin(abs(mu / (sigma2 / mu - 1)), 10000)
print(colnames(mu))
print(mu[0])
#quantiles <- qnbinom(p = c(0.025, 0.1, 0.25, 0.5, 0.75, 0.9, 0.975),
#       mu = mu["t=382", "LK Bad Dürkheim"],
#      size = size["t=382", "LK Bad Dürkheim"])
#print(quantiles)
}
}
print(type(mu))
for (col in colnames(results_df)[1]){
for (path_forecast in results[1]){
mu <- path_forecast$mu_matrix[, col]
sigma2 <- path_forecast$var_matrix[, col]
size <- pmin(abs(mu / (sigma2 / mu - 1)), 10000)
print(colnames(mu))
print(type(mu))
#quantiles <- qnbinom(p = c(0.025, 0.1, 0.25, 0.5, 0.75, 0.9, 0.975),
#       mu = mu["t=382", "LK Bad Dürkheim"],
#      size = size["t=382", "LK Bad Dürkheim"])
#print(quantiles)
}
}
for (col in colnames(results_df)[1]){
for (path_forecast in results[1]){
mu <- path_forecast$mu_matrix[, col]
sigma2 <- path_forecast$var_matrix[, col]
size <- pmin(abs(mu / (sigma2 / mu - 1)), 10000)
print(colnames(mu))
print(mu[1])
#quantiles <- qnbinom(p = c(0.025, 0.1, 0.25, 0.5, 0.75, 0.9, 0.975),
#       mu = mu["t=382", "LK Bad Dürkheim"],
#      size = size["t=382", "LK Bad Dürkheim"])
#print(quantiles)
}
}
for (col in colnames(results_df)[1]){
for (path_forecast in results[1]){
mu <- path_forecast$mu_matrix[, col]
sigma2 <- path_forecast$var_matrix[, col]
size <- pmin(abs(mu / (sigma2 / mu - 1)), 10000)
print(colnames(mu))
for (t in [1,2,3,4]){
for (col in colnames(results_df)[1]){
for (path_forecast in results[1]){
mu <- path_forecast$mu_matrix[, col]
sigma2 <- path_forecast$var_matrix[, col]
size <- pmin(abs(mu / (sigma2 / mu - 1)), 10000)
print(colnames(mu))
for (t in [1:4]){
for (col in colnames(results_df)[1]){
for (path_forecast in results[1]){
mu <- path_forecast$mu_matrix[, col]
sigma2 <- path_forecast$var_matrix[, col]
size <- pmin(abs(mu / (sigma2 / mu - 1)), 10000)
print(colnames(mu))
for (t in 1:4){
print(mu[t])
}
#quantiles <- qnbinom(p = c(0.025, 0.1, 0.25, 0.5, 0.75, 0.9, 0.975),
#       mu = mu["t=382", "LK Bad Dürkheim"],
#      size = size["t=382", "LK Bad Dürkheim"])
#print(quantiles)
}
}
for (col in colnames(results_df)[1]){
for (path_forecast in results[1]){
mu <- path_forecast$mu_matrix[, col]
sigma2 <- path_forecast$var_matrix[, col]
size <- pmin(abs(mu / (sigma2 / mu - 1)), 10000)
print(colnames(mu))
for (t in 1:4){
print(mu[t])
}
print(mu)
#quantiles <- qnbinom(p = c(0.025, 0.1, 0.25, 0.5, 0.75, 0.9, 0.975),
#       mu = mu["t=382", "LK Bad Dürkheim"],
#      size = size["t=382", "LK Bad Dürkheim"])
#print(quantiles)
}
}
for (col in colnames(results_df)[1]){
for (path_forecast in results[1]){
mu <- path_forecast$mu_matrix[, col]
sigma2 <- path_forecast$var_matrix[, col]
size <- pmin(abs(mu / (sigma2 / mu - 1)), 10000)
print(colnames(mu))
for (t in 1:4){
print(mu[t])
print(size[t])
}
print(mu)
#quantiles <- qnbinom(p = c(0.025, 0.1, 0.25, 0.5, 0.75, 0.9, 0.975),
#       mu = mu["t=382", "LK Bad Dürkheim"],
#      size = size["t=382", "LK Bad Dürkheim"])
#print(quantiles)
}
}
for (col in colnames(results_df)[1]){
for (path_forecast in results[1]){
mu <- path_forecast$mu_matrix[, col]
sigma2 <- path_forecast$var_matrix[, col]
size <- pmin(abs(mu / (sigma2 / mu - 1)), 10000)
print(colnames(mu))
for (t in 1:4){
#print(mu[t])
#print(size[t])
quantiles <- qnbinom(p = c(0.025, 0.1, 0.25, 0.5, 0.75, 0.9, 0.975),
mu = mu[t], size = size[t])
print(quantiles)
}
}
}
for (col in colnames(results_df)[1]){
for (path_forecast in results[1]){
mu <- path_forecast$mu_matrix[, col]
sigma2 <- path_forecast$var_matrix[, col]
size <- pmin(abs(mu / (sigma2 / mu - 1)), 10000)
print(colnames(mu))
for (t in 1:4){
print(names(mu))
#print(size[t])
quantiles <- qnbinom(p = c(0.025, 0.1, 0.25, 0.5, 0.75, 0.9, 0.975),
mu = mu[t], size = size[t])
print(quantiles)
}
}
}
for (col in colnames(results_df)[1]){
for (path_forecast in results[1]){
mu <- path_forecast$mu_matrix[, col]
sigma2 <- path_forecast$var_matrix[, col]
size <- pmin(abs(mu / (sigma2 / mu - 1)), 10000)
print(colnames(mu))
for (t in 1:4){
print(names(mu[t]))
#print(size[t])
quantiles <- qnbinom(p = c(0.025, 0.1, 0.25, 0.5, 0.75, 0.9, 0.975),
mu = mu[t], size = size[t])
print(quantiles)
}
}
}
for (col in colnames(results_df)[1]){
for (path_forecast in results[1]){
mu <- path_forecast$mu_matrix[, col]
sigma2 <- path_forecast$var_matrix[, col]
size <- pmin(abs(mu / (sigma2 / mu - 1)), 10000)
for (t in 1:4){
print(names(mu))
#print(size[t])
quantiles <- qnbinom(p = c(0.025, 0.1, 0.25, 0.5, 0.75, 0.9, 0.975),
mu = mu[t], size = size[t])
print(quantiles)
}
}
}
for (col in colnames(results_df)[1]){
for (path_forecast in results[1]){
mu <- path_forecast$mu_matrix[, col]
sigma2 <- path_forecast$var_matrix[, col]
size <- pmin(abs(mu / (sigma2 / mu - 1)), 10000)
for (t in 1:4){
colnamer <- str(t)+names(mu[t])
print(colnamer)
#print(size[t])
quantiles <- qnbinom(p = c(0.025, 0.1, 0.25, 0.5, 0.75, 0.9, 0.975),
mu = mu[t], size = size[t])
print(quantiles)
}
}
}
for (col in colnames(results_df)[1]){
for (path_forecast in results[1]){
mu <- path_forecast$mu_matrix[, col]
sigma2 <- path_forecast$var_matrix[, col]
size <- pmin(abs(mu / (sigma2 / mu - 1)), 10000)
for (t in 1:4){
colnamer <- str(t)+str(names(mu[t]))
print(colnamer)
#print(size[t])
quantiles <- qnbinom(p = c(0.025, 0.1, 0.25, 0.5, 0.75, 0.9, 0.975),
mu = mu[t], size = size[t])
print(quantiles)
}
}
}
for (col in colnames(results_df)[1]){
for (path_forecast in results[1]){
mu <- path_forecast$mu_matrix[, col]
sigma2 <- path_forecast$var_matrix[, col]
size <- pmin(abs(mu / (sigma2 / mu - 1)), 10000)
for (t in 1:4){
colnamer <- sprintf("%s WA _ %d", t, names(mu[t]))
print(colnamer)
#print(size[t])
quantiles <- qnbinom(p = c(0.025, 0.1, 0.25, 0.5, 0.75, 0.9, 0.975),
mu = mu[t], size = size[t])
print(quantiles)
}
}
}
for (col in colnames(results_df)[1]){
for (path_forecast in results[1]){
mu <- path_forecast$mu_matrix[, col]
sigma2 <- path_forecast$var_matrix[, col]
size <- pmin(abs(mu / (sigma2 / mu - 1)), 10000)
for (t in 1:4){
colnamer <- sprintf("%s WA _ %s", t, names(mu[t]))
print(colnamer)
#print(size[t])
quantiles <- qnbinom(p = c(0.025, 0.1, 0.25, 0.5, 0.75, 0.9, 0.975),
mu = mu[t], size = size[t])
print(quantiles)
}
}
}
print(df$location)
print(df["location"])
print(data$location)
print(unique(data$location))
regions <- unique(data$location)
for (region in regions[1]){
for (path_forecast in results[1]){
# determine the distribution parameters for each region and path_forecast
mu <- path_forecast$mu_matrix[, region]
sigma2 <- path_forecast$var_matrix[, region]
size <- pmin(abs(mu / (sigma2 / mu - 1)), 10000)
# determine quantiles from the distribution parameters
for (t in 1:4){
colnamer <- sprintf("%s WA _ %s", t, names(mu[t]))
print(colnamer)
quantiles <- qnbinom(p = c(0.025, 0.1, 0.25, 0.5, 0.75, 0.9, 0.975),
mu = mu[t], size = size[t])
print(quantiles)
}
}
}
save.image("C:/Users/555ka/Coding/GIT-Projects/DeepAR_InfluenzaForecast/DeepAR_InfluenzaForecast/R/forecast_an_WIS_score.R.RData")
